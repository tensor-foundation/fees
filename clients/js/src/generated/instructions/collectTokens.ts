/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  AccountRole,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { FEES_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getFeeSeedsDecoder,
  getFeeSeedsEncoder,
  type FeeSeeds,
  type FeeSeedsArgs,
} from '../types';

export type CollectTokensInstruction<
  TProgram extends string = typeof FEES_PROGRAM_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountTreasury extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountTreasuryTa extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountTreasuryTa extends string
        ? WritableAccount<TAccountTreasuryTa>
        : TAccountTreasuryTa,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CollectTokensInstructionData = {
  discriminator: ReadonlyUint8Array;
  seeds: Array<FeeSeeds>;
};

export type CollectTokensInstructionDataArgs = { seeds: Array<FeeSeedsArgs> };

export function getCollectTokensInstructionDataEncoder(): Encoder<CollectTokensInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['seeds', getArrayEncoder(getFeeSeedsEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([161, 0, 215, 226, 185, 222, 233, 109]),
    })
  );
}

export function getCollectTokensInstructionDataDecoder(): Decoder<CollectTokensInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['seeds', getArrayDecoder(getFeeSeedsDecoder())],
  ]);
}

export function getCollectTokensInstructionDataCodec(): Codec<
  CollectTokensInstructionDataArgs,
  CollectTokensInstructionData
> {
  return combineCodec(
    getCollectTokensInstructionDataEncoder(),
    getCollectTokensInstructionDataDecoder()
  );
}

export type CollectTokensInput<
  TAccountPayer extends string = string,
  TAccountTreasury extends string = string,
  TAccountMint extends string = string,
  TAccountTreasuryTa extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  /** Fee destination account */
  treasury: Address<TAccountTreasury>;
  mint: Address<TAccountMint>;
  treasuryTa: Address<TAccountTreasuryTa>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  seeds: CollectTokensInstructionDataArgs['seeds'];
  vaults: Array<Address>;
  tokenAccounts: Array<Address>;
};

export function getCollectTokensInstruction<
  TAccountPayer extends string,
  TAccountTreasury extends string,
  TAccountMint extends string,
  TAccountTreasuryTa extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
>(
  input: CollectTokensInput<
    TAccountPayer,
    TAccountTreasury,
    TAccountMint,
    TAccountTreasuryTa,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >
): CollectTokensInstruction<
  typeof FEES_PROGRAM_PROGRAM_ADDRESS,
  TAccountPayer,
  TAccountTreasury,
  TAccountMint,
  TAccountTreasuryTa,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = FEES_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    treasuryTa: { value: input.treasuryTa ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Remaining accounts.
  const remainingAccounts: IAccountMeta[] = [
    ...args.vaults.map((address) => ({ address, role: AccountRole.WRITABLE })),
    ...args.tokenAccounts.map((address) => ({
      address,
      role: AccountRole.WRITABLE,
    })),
  ];

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.treasuryTa),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      ...remainingAccounts,
    ],
    programAddress,
    data: getCollectTokensInstructionDataEncoder().encode(
      args as CollectTokensInstructionDataArgs
    ),
  } as CollectTokensInstruction<
    typeof FEES_PROGRAM_PROGRAM_ADDRESS,
    TAccountPayer,
    TAccountTreasury,
    TAccountMint,
    TAccountTreasuryTa,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCollectTokensInstruction<
  TProgram extends string = typeof FEES_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    /** Fee destination account */
    treasury: TAccountMetas[1];
    mint: TAccountMetas[2];
    treasuryTa: TAccountMetas[3];
    tokenProgram: TAccountMetas[4];
    associatedTokenProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: CollectTokensInstructionData;
};

export function parseCollectTokensInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCollectTokensInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      treasury: getNextAccount(),
      mint: getNextAccount(),
      treasuryTa: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCollectTokensInstructionDataDecoder().decode(instruction.data),
  };
}
