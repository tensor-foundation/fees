/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

export const enum ProjectNameProgramErrorCode {
  /** InvalidAuthority: Invalid authority for account */
  INVALID_AUTHORITY = 0x1770, // 6000
}

export class ProjectNameProgramError extends Error {
  override readonly name = 'ProjectNameProgramError';

  readonly code: ProjectNameProgramErrorCode;

  readonly cause: Error | undefined;

  constructor(
    code: ProjectNameProgramErrorCode,
    name: string,
    message: string,
    cause?: Error
  ) {
    super(`${name} (${code}): ${message}`);
    this.code = code;
    this.cause = cause;
  }
}

let projectNameProgramErrorCodeMap:
  | Record<ProjectNameProgramErrorCode, [string, string]>
  | undefined;
if (__DEV__) {
  projectNameProgramErrorCodeMap = {
    [ProjectNameProgramErrorCode.INVALID_AUTHORITY]: [
      'InvalidAuthority',
      `Invalid authority for account`,
    ],
  };
}

export function getProjectNameProgramErrorFromCode(
  code: ProjectNameProgramErrorCode,
  cause?: Error
): ProjectNameProgramError {
  if (__DEV__) {
    return new ProjectNameProgramError(
      code,
      ...(
        projectNameProgramErrorCodeMap as Record<
          ProjectNameProgramErrorCode,
          [string, string]
        >
      )[code],
      cause
    );
  }

  return new ProjectNameProgramError(
    code,
    'Unknown',
    'Error message not available in production bundles. Compile with __DEV__ set to true to see more information.',
    cause
  );
}
