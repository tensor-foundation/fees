/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

export const enum FeesProgramProgramErrorCode {
  /** ArithmeticError: Arithmetic error */
  ARITHMETIC_ERROR = 0x1770, // 6000
  /** MismatchedSeedsAndAccounts: Number of seeds and accounts do not match */
  MISMATCHED_SEEDS_AND_ACCOUNTS = 0x1771, // 6001
}

export class FeesProgramProgramError extends Error {
  override readonly name = 'FeesProgramProgramError';

  readonly code: FeesProgramProgramErrorCode;

  readonly cause: Error | undefined;

  constructor(
    code: FeesProgramProgramErrorCode,
    name: string,
    message: string,
    cause?: Error
  ) {
    super(`${name} (${code}): ${message}`);
    this.code = code;
    this.cause = cause;
  }
}

let feesProgramProgramErrorCodeMap:
  | Record<FeesProgramProgramErrorCode, [string, string]>
  | undefined;
if (__DEV__) {
  feesProgramProgramErrorCodeMap = {
    [FeesProgramProgramErrorCode.ARITHMETIC_ERROR]: [
      'ArithmeticError',
      `Arithmetic error`,
    ],
    [FeesProgramProgramErrorCode.MISMATCHED_SEEDS_AND_ACCOUNTS]: [
      'MismatchedSeedsAndAccounts',
      `Number of seeds and accounts do not match`,
    ],
  };
}

export function getFeesProgramProgramErrorFromCode(
  code: FeesProgramProgramErrorCode,
  cause?: Error
): FeesProgramProgramError {
  if (__DEV__) {
    return new FeesProgramProgramError(
      code,
      ...(
        feesProgramProgramErrorCodeMap as Record<
          FeesProgramProgramErrorCode,
          [string, string]
        >
      )[code],
      cause
    );
  }

  return new FeesProgramProgramError(
    code,
    'Unknown',
    'Error message not available in production bundles. Compile with __DEV__ set to true to see more information.',
    cause
  );
}
