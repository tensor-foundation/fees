/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import { Program, ProgramWithErrors } from '@solana/programs';
import {
  ProjectNameProgramError,
  ProjectNameProgramErrorCode,
  getProjectNameProgramErrorFromCode,
} from '../errors';
import { ParsedCreateInstruction } from '../instructions';
import { memcmp } from '../shared';

export const PROJECT_NAME_PROGRAM_ADDRESS =
  'MyProgram1111111111111111111111111111111111' as Address<'MyProgram1111111111111111111111111111111111'>;

export type ProjectNameProgram =
  Program<'MyProgram1111111111111111111111111111111111'> &
    ProgramWithErrors<ProjectNameProgramErrorCode, ProjectNameProgramError>;

export function getProjectNameProgram(): ProjectNameProgram {
  return {
    name: 'projectName',
    address: PROJECT_NAME_PROGRAM_ADDRESS,
    getErrorFromCode(code: ProjectNameProgramErrorCode, cause?: Error) {
      return getProjectNameProgramErrorFromCode(code, cause);
    },
  };
}

export enum ProjectNameAccount {
  MyAccount,
  MyPdaAccount,
}

export function identifyProjectNameAccount(
  account: { data: Uint8Array } | Uint8Array
): ProjectNameAccount {
  const data = account instanceof Uint8Array ? account : account.data;
  if (memcmp(data, new Uint8Array([246, 28, 6, 87, 251, 45, 50, 42]), 0)) {
    return ProjectNameAccount.MyAccount;
  }
  if (memcmp(data, new Uint8Array([134, 161, 6, 144, 105, 236, 234, 48]), 0)) {
    return ProjectNameAccount.MyPdaAccount;
  }
  throw new Error(
    'The provided account could not be identified as a projectName account.'
  );
}

export enum ProjectNameInstruction {
  Create,
}

export function identifyProjectNameInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): ProjectNameInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (memcmp(data, new Uint8Array([24, 30, 200, 40, 5, 28, 7, 119]), 0)) {
    return ProjectNameInstruction.Create;
  }
  throw new Error(
    'The provided instruction could not be identified as a projectName instruction.'
  );
}

export type ParsedProjectNameInstruction<
  TProgram extends string = 'MyProgram1111111111111111111111111111111111',
> = {
  instructionType: ProjectNameInstruction.Create;
} & ParsedCreateInstruction<TProgram>;
