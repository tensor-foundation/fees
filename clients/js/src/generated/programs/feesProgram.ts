/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import { Program, ProgramWithErrors } from '@solana/programs';
import {
  FeesProgramProgramError,
  FeesProgramProgramErrorCode,
  getFeesProgramProgramErrorFromCode,
} from '../errors';
import { ParsedCollectInstruction } from '../instructions';
import { memcmp } from '../shared';

export const FEES_PROGRAM_PROGRAM_ADDRESS =
  'TFEEgwDP6nn1s8mMX2tTNPPz8j2VomkphLUmyxKm17A' as Address<'TFEEgwDP6nn1s8mMX2tTNPPz8j2VomkphLUmyxKm17A'>;

export type FeesProgramProgram =
  Program<'TFEEgwDP6nn1s8mMX2tTNPPz8j2VomkphLUmyxKm17A'> &
    ProgramWithErrors<FeesProgramProgramErrorCode, FeesProgramProgramError>;

export function getFeesProgramProgram(): FeesProgramProgram {
  return {
    name: 'feesProgram',
    address: FEES_PROGRAM_PROGRAM_ADDRESS,
    getErrorFromCode(code: FeesProgramProgramErrorCode, cause?: Error) {
      return getFeesProgramProgramErrorFromCode(code, cause);
    },
  };
}

export enum FeesProgramAccount {
  FeeVault,
}

export function identifyFeesProgramAccount(
  account: { data: Uint8Array } | Uint8Array
): FeesProgramAccount {
  const data = account instanceof Uint8Array ? account : account.data;
  if (memcmp(data, new Uint8Array([192, 178, 69, 232, 58, 149, 157, 132]), 0)) {
    return FeesProgramAccount.FeeVault;
  }
  throw new Error(
    'The provided account could not be identified as a feesProgram account.'
  );
}

export enum FeesProgramInstruction {
  Collect,
}

export function identifyFeesProgramInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): FeesProgramInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (memcmp(data, new Uint8Array([208, 47, 194, 155, 17, 98, 82, 236]), 0)) {
    return FeesProgramInstruction.Collect;
  }
  throw new Error(
    'The provided instruction could not be identified as a feesProgram instruction.'
  );
}

export type ParsedFeesProgramInstruction<
  TProgram extends string = 'TFEEgwDP6nn1s8mMX2tTNPPz8j2VomkphLUmyxKm17A',
> = {
  instructionType: FeesProgramInstruction.Collect;
} & ParsedCollectInstruction<TProgram>;
