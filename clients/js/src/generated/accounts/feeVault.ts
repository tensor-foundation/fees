/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import { FeeVaultSeeds, findFeeVaultPda } from '../pdas';

export type FeeVault = { discriminator: ReadonlyUint8Array };

export type FeeVaultArgs = {};

export function getFeeVaultEncoder(): Encoder<FeeVaultArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([192, 178, 69, 232, 58, 149, 157, 132]),
    })
  );
}

export function getFeeVaultDecoder(): Decoder<FeeVault> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getFeeVaultCodec(): Codec<FeeVaultArgs, FeeVault> {
  return combineCodec(getFeeVaultEncoder(), getFeeVaultDecoder());
}

export function decodeFeeVault<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<FeeVault, TAddress>;
export function decodeFeeVault<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<FeeVault, TAddress>;
export function decodeFeeVault<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<FeeVault, TAddress> | MaybeAccount<FeeVault, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getFeeVaultDecoder()
  );
}

export async function fetchFeeVault<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<FeeVault, TAddress>> {
  const maybeAccount = await fetchMaybeFeeVault(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeFeeVault<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<FeeVault, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeFeeVault(maybeAccount);
}

export async function fetchAllFeeVault(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<FeeVault>[]> {
  const maybeAccounts = await fetchAllMaybeFeeVault(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeFeeVault(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<FeeVault>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeFeeVault(maybeAccount));
}

export function getFeeVaultSize(): number {
  return 8;
}

export async function fetchFeeVaultFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: FeeVaultSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<FeeVault>> {
  const maybeAccount = await fetchMaybeFeeVaultFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeFeeVaultFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: FeeVaultSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<FeeVault>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findFeeVaultPda(seeds, { programAddress });
  return await fetchMaybeFeeVault(rpc, address, fetchConfig);
}
