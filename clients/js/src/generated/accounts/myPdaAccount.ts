/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import { MyPdaAccountSeeds, findMyPdaAccountPda } from '../pdas';

export type MyPdaAccount<TAddress extends string = string> = Account<
  MyPdaAccountAccountData,
  TAddress
>;

export type MaybeMyPdaAccount<TAddress extends string = string> = MaybeAccount<
  MyPdaAccountAccountData,
  TAddress
>;

export type MyPdaAccountAccountData = {
  discriminator: Array<number>;
  bump: number;
};

export type MyPdaAccountAccountDataArgs = { bump: number };

export function getMyPdaAccountAccountDataEncoder(): Encoder<MyPdaAccountAccountDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: [134, 161, 6, 144, 105, 236, 234, 48],
    })
  );
}

export function getMyPdaAccountAccountDataDecoder(): Decoder<MyPdaAccountAccountData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['bump', getU8Decoder()],
  ]);
}

export function getMyPdaAccountAccountDataCodec(): Codec<
  MyPdaAccountAccountDataArgs,
  MyPdaAccountAccountData
> {
  return combineCodec(
    getMyPdaAccountAccountDataEncoder(),
    getMyPdaAccountAccountDataDecoder()
  );
}

export function decodeMyPdaAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): MyPdaAccount<TAddress>;
export function decodeMyPdaAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeMyPdaAccount<TAddress>;
export function decodeMyPdaAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): MyPdaAccount<TAddress> | MaybeMyPdaAccount<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMyPdaAccountAccountDataDecoder()
  );
}

export async function fetchMyPdaAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MyPdaAccount<TAddress>> {
  const maybeAccount = await fetchMaybeMyPdaAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMyPdaAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeMyPdaAccount<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMyPdaAccount(maybeAccount);
}

export async function fetchAllMyPdaAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MyPdaAccount[]> {
  const maybeAccounts = await fetchAllMaybeMyPdaAccount(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMyPdaAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeMyPdaAccount[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMyPdaAccount(maybeAccount));
}

export function getMyPdaAccountSize(): number {
  return 9;
}

export async function fetchMyPdaAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: MyPdaAccountSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MyPdaAccount> {
  const maybeAccount = await fetchMaybeMyPdaAccountFromSeeds(
    rpc,
    seeds,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMyPdaAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: MyPdaAccountSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeMyPdaAccount> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findMyPdaAccountPda(seeds, { programAddress });
  return fetchMaybeMyPdaAccount(rpc, address, fetchConfig);
}
