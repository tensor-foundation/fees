/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import { AmmVaultSeeds, findAmmVaultPda } from '../pdas';

export type AmmVault<TAddress extends string = string> = Account<
  AmmVaultAccountData,
  TAddress
>;

export type MaybeAmmVault<TAddress extends string = string> = MaybeAccount<
  AmmVaultAccountData,
  TAddress
>;

export type AmmVaultAccountData = { discriminator: Array<number> };

export type AmmVaultAccountDataArgs = {};

export function getAmmVaultAccountDataEncoder(): Encoder<AmmVaultAccountDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
    ]),
    (value) => ({ ...value, discriminator: [21, 36, 95, 63, 199, 96, 104, 49] })
  );
}

export function getAmmVaultAccountDataDecoder(): Decoder<AmmVaultAccountData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
  ]);
}

export function getAmmVaultAccountDataCodec(): Codec<
  AmmVaultAccountDataArgs,
  AmmVaultAccountData
> {
  return combineCodec(
    getAmmVaultAccountDataEncoder(),
    getAmmVaultAccountDataDecoder()
  );
}

export function decodeAmmVault<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): AmmVault<TAddress>;
export function decodeAmmVault<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAmmVault<TAddress>;
export function decodeAmmVault<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): AmmVault<TAddress> | MaybeAmmVault<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAmmVaultAccountDataDecoder()
  );
}

export async function fetchAmmVault<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<AmmVault<TAddress>> {
  const maybeAccount = await fetchMaybeAmmVault(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAmmVault<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAmmVault<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAmmVault(maybeAccount);
}

export async function fetchAllAmmVault(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<AmmVault[]> {
  const maybeAccounts = await fetchAllMaybeAmmVault(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAmmVault(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAmmVault[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeAmmVault(maybeAccount));
}

export function getAmmVaultSize(): number {
  return 8;
}

export async function fetchAmmVaultFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: AmmVaultSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<AmmVault> {
  const maybeAccount = await fetchMaybeAmmVaultFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAmmVaultFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: AmmVaultSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAmmVault> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findAmmVaultPda(seeds, { programAddress });
  return await fetchMaybeAmmVault(rpc, address, fetchConfig);
}
